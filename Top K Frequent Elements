// Top K Frequent Elements
/*
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
*/



// solved in second attempt only , by myself . 
/*
-> question max sum subarray jaisa hai
-> approach - count frequency through map ,
         use min heap then find the largest frequecies 
        stores the k elements with larger frequencies  in vector 
-> to make it easier to access elements from frequecies after min heap  , let make the priority queue pair type .

*/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        for(auto it:m){
            if(pq.size()<k){
                pq.push({it.second,it.first});
            }
            else{
                if(it.second>(pq.top()).first){
                    pq.pop();
                    pq.push({it.second,it.first});
                }
            }
            

        }
        vector<int> ans;
        for(int i=0;i<k;i++){
            ans.push_back((pq.top()).second);
            pq.pop();

        }
        return ans;
        
    }
};
